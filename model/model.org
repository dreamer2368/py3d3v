#+TITLE:  3d3v Electrostatic PIC Code
#+AUTHOR: Scott High
#+LATEX_HEADER: \usepackage{amsmath}
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
#+LATEX_HEADER: \newcommand{\pd}[2]{\frac{\partial #1}{ \partial #2}}
#+LATEX_HEADER: \renewcommand{\v}[1]{\bold{#1}}

#+begin_src python :session :exports none
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import numpy as np
#+end_src

#+RESULTS:

* Model Definition

** General description
Approximating a 3 dimensional plasma using a finite number of
negatively charged electrons and positively charge ions.

- Particle dynamics are simulated by solving
  \[ F = q(E+v \times B) \]
  where
  \[ E = -\nabla \phi \]
  and
  \[ \nabla^2 \phi = -\frac{\rho}{\epsilon_0} \]
  - $\phi$ is approximated from the mesh charge density using an FFT
    based algorithm
  - $E$ is approximated from $\phi$ using second order centered finite
    differences
- The time integrator is Leap-Frog
  - $v$ is advanced using the Boris Method
  - $x$ is advanced in the obvious way using $v$
  - See below for details
- Particle charges are interpolated to a uniform mesh to approximate
  $\rho$ using the cloud in cell (CIC) method. This is equivalent to
  linear interpolation.
- The magnetic field is uniform in the $z$ direction, and is held
  constant at $B_0$.
- Particles are free to move in $x, y, z$ and have velocity components
  $v_x, v_y, v_z$

** Algorithm

1) Weight charges $q_i$ to the uniform mesh to get charge density $\rho$
   - Cloud in cell (CIC)
2) Solve $\nabla^2 \phi(t) = -\frac{\rho}{\epsilon_0}$ for $\phi(t)$
   1) Use FFT to convert mesh charge density $\rho(x_i)$ to $\rho(k)$
   2) Solve $K^2 \phi(k) = \frac{\rho(k)}{\epsilon_0}$ for $\phi(k)$ where
      $K^2 = k^2 \left(\frac{\sin(k dx/2)}{k dx/2}\right)^2$
   3) Use IFFT to get $\phi(x_i)$ from $\phi(k)$
3) Solve $E(t) = -\nabla \phi(t)$ for $E_x, E_y, E_z$
   - Second order centered finite differences
4) Interpolate $E_x, E_y, E_z$ to particle positions
   - Cloud in cell (CIC)
5) Advance $v(t-\Delta t/2) \to v(t+\Delta t/2)$ using $E(t)$
6) Advance $x(t) \to x(t+\Delta t)$ using $v(t+\Delta t/2)$

*** Time integration details

**** Boris method for advancing $v$
\begin{equation}
v^{-} = v_{t-\Delta t/2} + \frac{qE}{m} \frac{\Delta t}{2}
\end{equation}
\begin{equation}
\frac{v^+-v^-}{\Delta t} = \frac{q}{2m}(v^+ + v^-)\times B
\end{equation}
\begin{equation}
v_{t+\Delta t/2} = v^+ + \frac{qE}{m}\frac{\Delta t}{2}
\end{equation}

**** Advancing $x$
\[ x(t+\Delta t) = x(t) + v(t+\Delta t/2) \Delta t \]

* Model Validation

** Langmuir Oscillations
Langmuir oscillations are simple harmonic density waves that form in
cold plasmas in response to small perturbations in the initial charge
density (with $B_0=0$). For simplicity we create oscillations only in
the $x$ direction. To approximate the conditions in a cold plasma, the
simulation volume is filled with a large number of particles with
charge chosen such that particles in the $y$-$z$ plane approximate
sheet charges with charge density $q$.

The particle displacements are expected to follow
\[ \ddot{\delta x} = - \omega_p^2 \delta x \]
which is simple harmonic motion with period
$\omega_p=(\frac{nq^2}{m \epsilon_0})^{1/2}$.

*** Initial Conditions
- Position perturbation: $x = x_0 + A \cos(k x_0)$
  - Corresponds to a $\sin$ perturbation in the initial density at the
    same mode
- Expected density: $\rho(x, t) \propto \sin(kx)\cos(\omega t)$

*** Dispersion relations
- For a cold plasma at rest
  \[ \omega(\bold{k}) = \omega_p \]
- The numerical dispersion relation is
  \[ \omega(k) = \omega_p \cos\left(\frac{k \Delta x}{2}\right) \]

*** Derivation
We are searching for linearized small amplitude wave solutions at high
frequencies.
Since ions are considerably more massive than electrons, we hold them
fixed (assume $\frac{m_e}{m_i} \to 0$)
Then, we can write electron density $n$ and velocity $v$ as
\[ n = n_0 + \hat{n} e^{i(k x-\omega t)} \]
\[ v = \hat{v} e^{i(k x-\omega t)} \]
We will linearize Maxwell's equations by assuming hatted
variables $\hat{}$ are small.
Combine the Lorentz force with potential $\phi$ to get
\[ m \frac{d v}{dt} = q E = -q \frac{d \phi}{d x}  \]
\[ k^2 \hat{\phi} = \frac{q}{\epsilon_0} \hat{n} \]
\[ \implies \omega m \hat{v} = \frac{q^2}{\epsilon_0 k^2} \hat{n} \]
Applying the continuity equation
\[ \pd{n}{t} + \pd{(n v)}{x} = 0  \]
to solve for $\hat{n}$ in terms of $\hat{v}$ where the second order
terms are dropped yields
\[ -i \omega \hat{n} + i k n_0 \hat{v} = 0 \]
\[ \implies \hat{n} = \frac{k n_0}{\omega} \hat{v} \]
Combine the above equations to get
\[ \omega m \hat{v} = \frac{q^2}{\epsilon_0 k} \hat{n}
                     = \frac{q^2 n_0}{\epsilon_0 \omega} \hat{v} \]
\[ \implies \omega^2 = \left(\frac{q^2 n_0}{\epsilon_0 m}\right)^2 = \omega_p^2 \]
Then the only frequency supported is $\omega = \omega_p$, which is independent
of $k$. 

*** Numerical Results
- Initial charge positions are equispaced in the domain
- $\omega$ vs $k$ for fixed $dx$ (with constant $L$)
  
  [[file:py3d3v/wk_fixed_dx.png]]
  - ppc = average particles per cell per dimension before pertubation
    - Total average particles per cell before pertubation will be ppc$^3$
  - Number of grid points = $64^3$
  - $L_x = L_y = L_z = 2\pi$
  - $dx = dy = dz = \frac{64}{2\pi}$
  - Number of charges = $(\text{ppc}\times 64)^3$
  - $k = \text{mode}\cdot \frac{2\pi}{L}$
- Choosing parameters
  - With ppc=2 the experimental numerical dispersion approaches the
    expected numerical dispersion $\omega(k) = \omega_p\cos(\frac{k
    dx}{2})$
- Measuring $\omega$
  - If the initial density is pertubed in the $k^{th}$ fourier mode,
    the density is expected to follow $\rho(k, t) \propto \cos(\omega
    t)$, which is generally complex.  Then we can use the fact that
    $\rho(k, t) \rho^*(k, t) \propto \cos^2(\omega t) =
    \frac{1}{2}(\cos(2\omega t)-1)$ is real to compute $\omega$. The
    first 10 time steps are averaged to produce the estimated
    $\omega$. The results produced using this method are consistent
    with measuring $\omega$ directly from particle displacements and
    are simpler to calculate.
- I am currently investigating the high error when ppc<1.
  
** Plasma Sheath
When a plasma comes into contact with a metal surface, the faster
moving electrons deposit charge on the surface faster than the slower
moving ions. This leads to a net negative charge on the surface, which
is balanced out by a net positive charge a short distance from the
wall. The resulting region of positive charge is called the plasma
sheath.

* Numerical Dispersion Relation for Langmuir Oscillations
:PROPERTIES:
:ID:       694886f9-6045-412b-9902-a8061390e16f
:END:
We start by deriving expressions for $F(k)$ and $\rho(k)$. These will
be combined at the end to produce our numerical dispersion relation.
First make the following definitions:
- $S(x)$ is the weight function and its fourier transform $S(k)$ is
  the weight factor. This is normalized such that $\Delta x \sum_j
  S(X_j-x) = 1$
- $X_j = j \Delta x$ is the jth grid point
- $k_p = k - p k_g$ where $k_g = \frac{2\pi}{\Delta x}$

The force on a charge $q$ at $x$ is given by
\[ F(x) = q \Delta x \sum_j E_j S(X_j-x) \]
\begin{align*}
  F(k) &= \int_{-\infty}^\infty dx F(x) e^{-ikx} \\
       &= \int dx q\Delta x \sum_j S(X_j-x) e^{ik(X_j-x)} e^{-ikX_j} \\
       &= q \Delta x \sum_j E_j e^{-ikX_j} \int S(X_j-x) e^{ik(X_j-x)} dx \\
       &= q \Delta x \sum_j E_j e^{-ikX_j} S(-k) \\
       &= q E(k) S(-k)
\end{align*}

Define the "cloud density" function $\rho_c$ as
\[ \rho_c(x) = q \int_{-\infty}^{\infty} dx' S(x'-x) n(x') \]
Then, by the convolution theorem
\[ \rho_c(k) = q S(k) n(k) \]
The charge density at points on the grid is given by
\begin{align*}
  \rho(x_i) &= \int_{-\infty}^{\infty} \frac{dk}{2\pi} e^{i k x_i} \rho_c(k) \\
            &= \int_{-\pi/\Delta x}^{\pi/\Delta x} \frac{dk}{2\pi} e^{i k x_i}
               \sum_{p=-\infty}^{\infty}\rho_c(k_p) \\
  \implies \rho(k) &= \sum_{p=-\infty}^{\infty}\rho_c(k_p) \\
                   &= \sum_{p=-\infty}^{\infty} S(k_p) n(k_p)
\end{align*}
This shows the coupling of different modes induced by the grid. 

We know from the derivation of Langmuir oscillations above that
\[ n(k) = i \frac{k n_0}{m \omega^2} F(k) \]
and
\[ -i \kappa(k) \phi(k) = E(k) \]
For the following we will always use $\kappa(k) = k \frac{\sin(k dx)}{k dx}$,
which corresponds to differentiating $E$ with a second order centered finite
difference stencil.

Finally, we put everything together to get
\begin{align*}
  \rho(k)
    &= q \sum_{p=-\infty}^{\infty} S(k_p) n(k_p) \\
    &= \frac{q n_0}{m} \sum_{p=-\infty}^{\infty} \frac{i k_p S(k_p) F(k_p)}{\omega^2} \\
    %&= \frac{q^2 n_0}{m} \sum_{p=-\infty}^{\infty} \frac{i k_p S^2(k_p) E(k_p)}{\omega^2} \\
    &= \frac{q^2 n_0}{m} \sum_{p=-\infty}^{\infty}
                         \frac{k_p S^2(k_p) \kappa(k_p) \phi(k_p)}{\omega^2} \\
    &= \frac{q^2 n_0}{m} \phi(k) \sum_{p=-\infty}^{\infty}
                         \frac{k_p S^2(k_p) \kappa(k_p)}{\omega^2} \\
    &= \frac{q^2 n_0}{m\epsilon_0} \frac{\rho(k)}{K^2(k)} \sum_{p=-\infty}^{\infty}
                         \frac{k_p S^2(k_p) \kappa(k_p)}{\omega^2} \\
    \implies \omega^2 &=
      \omega_p^2 \left[\frac{1}{K^2(k)}\sum_{p=-\infty}^{\infty}
                 k_p S^2(k_p) \kappa(k_p)\right] \\
\end{align*}

We make use of the identity
\[ \sum_p(k-k_p)^{-3} = \left[ \frac{2}{dx} \sin(k dx/2) \right]^{-3} cos(k dx/2)  \]
to simplify the sum
\begin{align*}
  \sum_p k_p \kappa(k_p) S^2(k_p) &= \sum_p k_p^2 \frac{\sin(k_p dx)}{k_p dx}
                                                  \left(\frac{\sin(k_p dx/2)}{k_p dx/2} \right)^4 \\
  &= \frac{2^4 \sin(k dx) \sin^4(k dx/2)}{(dx)^5} \sum_p k_p^{-3} \\
  &= \frac{2 \sin(k dx) \sin(k dx/2) \cos(k dx/2)}{(dx)^2}  \\
\end{align*}

The function $K(k)$ is determined by the method used to differentiate $\phi$
in gauss's law. 
We consider the following two cases:
\[ K^2(k) = k^2  \]
which corresponds to exact spectral differentiation and
\[ K^2(k) = k^2 \left(\frac{\sin(k dx/2)}{k dx/2}\right)^2 \]
which corresponds to a second order centered finite difference evaluation of $\phi$,
$\frac{d^2 \phi}{dx^2} = \frac{1}{dx^2}(\phi(X_{j-1})-2\phi(X_{j})+\phi(X_{j+1})$.
For the following analysis we will assume that CIC weighting is used, so that
$S(k) = \left(\frac{\sin(k dx/2)}{k dx/2} \right)^2$.

In the first case where $K^2(k) = k^2$ we (finally) get the result
\[ \omega^2 = \omega_p^2 
     \left[\frac{2}{(kdx)^2} \sin(kdx)sin(kdx/2)\cos(kdx/2) \right] \]

In the second case where
$K^2(k) = k^2 \left(\frac{\sin(k dx/2)}{k dx/2}\right)^2$
we get, after applying the double angle identity,
\[ \omega^2 = \omega_p^2 \cos^2(kdx/2) \]

#+NAME: disp-plot
#+BEGIN_SRC python :session :results file :exports results
  xv = np.linspace(.01, .5, 20)
  a = np.cos(xv/2.)
  b = 2*np.sin(xv)*np.sin(xv/2.)*np.cos(xv/2.)/xv**2
  fig = plt.figure()
  ax = fig.add_subplot(111)
  ax.plot(xv, a, label="Finite Diff"); ax.plot(xv, b, label="Spectral");
  c = np.ones_like(a)
  ax.plot(xv, c, 'b--', label="$\omega_p$")
  ax.set_xlabel("$k dx$"); ax.set_ylabel("$\omega(k)$");
  ax.set_title("$\omega$ vs. $\omega(k)$")
  ax.set_ylim((.91, 1.01))
  ax.legend(loc="lower left")
  fig.savefig("disp.png")
  "disp.png"
#+END_SRC

#+RESULTS: disp-plot
[[file:disp.png]]

* Particle-Particle Particle-Mesh (P3M) Method
P3M methods extend PM methods by splitting the potential from a
particle into short range and long range components. This is done by
utilizing the following trivial identity
\[ \phi(\v{r}) = [\phi(\v{r})-f(\v{r})] + f(\v{r}) \]
The function $f(\v{r})$ is chosen so the potential from the first term
$\phi_s(\v{r}) = \phi(\v{r})-f(\v{r})$ decays rapidly in real space, and the
fourier transform $\hat{f}(\v{k})$ of the second part $\phi_l(\v{r})=f(\v{r})$
decays rapidly in $\v{k}$ space. These are the so called short range
and long range potentials, and correspond to modifications in the
charge density of the form
\[ \rho(\v{r}) = [\rho(\v{r})-G(\v{r})] + G(\v{r}) \]

The short range potentials are evaluated exactly within some small
fixed radius $r_{\text{max}}$. The long range potentials are evaluated
by interpolating charge density to a uniform mesh and solving Poisson's
equation on the resulting mesh charge density.  The total potential is
then simply the sum of the calculated short and long range potentials.

** Force calculation details
Two different screen functions are implemented: Gaussian (S3) and the
hat function (S2).

The Gaussian screen is defined as
\[ G(\v{r}; \beta) = \frac{\beta^3}{\pi^{3/2}} e^{-\beta^2 r^2} \]
and its fourier transform is
\begin{align*}
 \hat{G}(\v{k}; \beta) &= \int d^3v G(\v{r};\beta) e^{-i\v{k}\cdot\v{r}} \\
 &= e^{-k^2/(2\beta)^2}
\end{align*}
This is also called the S3 function in the notation of Hockney
and Eastwood.
A straightforward (but algebra heavy) application of Gauss's law to
the Gaussian charge distribution $G$ yields
\[ E(r) = \frac{q}{2\epsilon_0\pi^{3/2}}\left[\frac{\sqrt{\pi}}{2r^2}erf(r\beta)
          -\frac{\beta}{r}e^{-\beta^2 r^2}\right] \]


The hat function, as defined in Hockney and Eastwood, is given by
\begin{equation*}
S2(r) =
\begin{cases}
\frac{48}{\pi \beta^4}\left(\frac{\beta}{2}-r\right) & \text{ if } r<\frac{\beta}{2} \\
0 &\text{ otherwise }
\end{cases}
\end{equation*}
and its fourier transform is
\[ \hat{S2}(k) = \frac{12}{(k\beta/2)^4}\left(2-2\cos\left(\frac{k\beta}{2}\right)
-\frac{k\beta}{2}\sin\left(\frac{k\beta}{2}\right)\right) \]
The field from an $S2$ distribution is
\begin{equation*}
E(r) =
\begin{cases}
 \frac{4 q_i}{\pi \epsilon_0 \beta^{4}} \left(2 \beta r - 3 r^2 \right) & \text{ if } r<\frac{\beta}{2} \\
\frac{q_i}{4\pi\epsilon_0 r^2} &\text{ otherwise }
\end{cases}
\end{equation*}


*** Short Range Force Calculation (Particle-Particle Force)
:PROPERTIES:
:ID:       4dea2865-d70f-4c47-9e60-14453cba27d5
:END:
Since the field from a point particle and the field produced by the
screen functions are both known the short range forces can be
calculated exactly. For example, the short range force between two
particles using a Gaussian screen function is calculated exactly as
\begin{equation*}
  F_s(r_{ij}) =
  \begin{cases}
  q_i q_j \left(\frac{1}{4\pi\epsilon_0 r_{ij}^2} -
  \frac{1}{2\epsilon_0\pi^{3/2}}\left[\frac{\sqrt{\pi}}{2r_{ij}^2}erf(r_{ij}\beta)
                                      -\frac{\beta}{r_{ij}}e^{-\beta^2 r_{ij}^2}\right]\right)
  & \text{ if $r_{ij}<r_{\text{max}}$} \\
  0 & \text{ otherwise }
  \end{cases}
\end{equation*}
where $\v{r}_{ij} = \v{r}_i-\v{r}_j$ and $r_{\text{max}}$ is the
cut-off radius. This is shown in Figure \ref{fig:gaussian-screen} to
exhibit rapid decay as expected.

#+CAPTION: The field produced by a Gaussian screen and associated short range
#+CAPTION: forces between particles with unit charge.
#+LABEL: fig:gaussian-screen
#+ATTR_LATEX: :placement [h!]
[[file:figs/p3m-gaussian-fields.pdf]]

Care must be taken to avoid calculating all $\mathcal{O}(N^2)$
interactions between particles. To reduce the number of interactions a
set of regular non-overlapping cells are defined that cover the
computational mesh, this is shown in Figure
\ref{fig:coarse-fine}. Each particle is assigned to one and only one
cell. The cell size is chosen such that for each particle $\v{x}_i$,
$|\v{x}_i-\v{x}|<r_\text{max}$ implies that $\v{x}$ is in that
particles cell or one of its 26 neighbors. For each particle short
range interactions are then calculated with the particles sharing its
cell and those in neighboring cells, reducing the interactions
calculated to only those particles in the 27 cells nearest the
particle.

#+CAPTION: Relationship between coarse cells and the computational mesh.
#+CAPTION: The lines define cells and gray dots are the points of the computational mesh.
#+LABEL: fig:coarse-fine
#+ATTR_LATEX: :width .4\textwidth :placement [h!]
[[file:figs/coarse-cell-particle.pdf]]

*** Long Range Force Calculation (Particle-Mesh Force)
It is well known that the fourier transform of Poisson's equation is
\[ k^2 \hat{\phi}(\v{k}) = \frac{\hat{\rho}(\v{k})}{\epsilon_0} \]
From this it is simple to solve for $\hat{\phi}(\v{k})$ and then recover
$\phi(\v{x})$ by the inverse fourier transform
$\phi(\v{x}) = \int d\v{k} \hat{\phi}(\v{k}) e^{i\v{k}\cdot\v{x}}$.
Similarly, the fourier transform for discrete values
on a uniform mesh is defined as
\[ \hat{\rho}(\v{k}) = \sum_p \rho(\v{x}_p) e^{-i \v{k}\cdot\v{x}_p} \]
where the summation is over all mesh points $\v{x}_p$. The $i^\text{th}$
component of $\v{k}$ can take the values
$k_i \in \left\{ \frac{2\pi}{L_i}, 2\frac{2\pi}{L_i},
\ldots, \frac{N_i}{2} \frac{2\pi}{L_i} \right\}$
where $N_i$ and $L_i$ are the number of grid points and length
of the $i^\text{th}$ dimension.
The inverse discrete fourier transform is defined similarly as
\[ \rho(\v{x}) = \sum_\v{k} \hat{\rho}(\v{k}) e^{i \v{k}\cdot\v{x}} \]
where the summation is over all values of $\v{k}$ allowed by the
discrete fourier transform on the mesh.
These discrete transforms can be calculated efficiently using the
Fast Fourier Transform (FFT) and Inverse Fast Fourier Transform (IFFT)
algorithms.

To calculate long range forces the charges are first interpolated
to the mesh using linear interpolation  to find the mesh
charge density $\rho_m$. In the context of particle methods linear
interpolation is often referred to as Cloud-In-Cell (CIC) weighting. 
The modified charge density $\rho_l$ at grid point $\v{x}_p$ is
\[ \rho_l(\v{x}_p) = \sum_{p'} \rho_m(\v{x}_{p'}) G(\v{x}_p-\v{x}_{p'}) \]
where the summation is understood to be over all mesh points $\v{x}_{p'}$ in
the domain and its periodic images.
This is a discrete convolution, so we can apply the 
[[https://en.wikipedia.org/wiki/Convolution_theorem#Functions_of_discrete_variable_sequences][discrete convolution theorem]]
to efficiently calculate
\[ \hat{\rho}_l(\v{k}) = \hat{\rho}_m(\v{k}) \hat{G}(\v{k}) \]
The long-range potential is easily calculated using the relation
\[ k^2 \hat{\phi_l}(\v{k}) = \frac{\hat{\rho}_l(\v{k})}{\epsilon_0} \]
An inverse FFT is then used to transform $\hat{\phi_l}(\v{k})$ to $\phi_l(\v{x}_p)$.
The electric field $\v{E}_l$ at each grid point is calculated using second order
centered finite differences, which in each dimension $j$ is defined as
$E_i = \frac{\phi_{i+1} - \phi_{i-1}}{dx_j}$.
The field is interpolated to particle positions using
linear (CIC) interpolation.

** Algorithm
The P3M algorithm can be expressed compactly as follows:

1) Weight charges $q_i$ to the uniform mesh to get charge density
   $\rho_m$ using linear (CIC) weighting
2) Use FFT to convert mesh charge density $\rho_m(\v{x}_p)$ to
   $\hat{\rho}_m(\v{k})$
3) Set $\hat{\rho}_l(\v{k}) = \hat{\rho}_m(\v{k}) \hat{G}(\v{k})$
4) Solve $k^2 \hat{\phi}_l(\v{k}) = \frac{\hat{\rho}_l(\v{k})}{\epsilon_0}$ for
   $\hat{\phi}_l(\v{k})$
5) Use IFFT to convert $\hat{\phi}_l(\v{k})$ to $\phi(\v{x}_p)$
6) Solve $\v{E}_l = -\nabla \phi$ on the mesh points using second order
   centered finite differences
7) Interpolate $\v{E}_l(\v{x}_p)$ at mesh points to $\v{E}_l(\v{x}_i)$
   at particle positions using cloud in cell (CIC) interpolation
8) Calculate short range fields $\v{E}_s(\v{x}_i)$
9) Advance particle velocities and positions using the leap-frog time
   integration scheme with the total electric field
   $\v{E}=\v{E}_l+\v{E}_s$

